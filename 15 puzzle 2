#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

void displayBoard(vector<vector<int>> &board)
{
   cout << "Displaying board: " << endl;

   for (auto e : board)
   {
       for (auto f : e)
       {
           cout << f << " ";
       }

       cout << endl;
   }

   cout << "------------" << endl;
}

bool gameOver(vector<vector<int>> &board, int cellAmount)
{
    int counter = 1;

    for (auto e : board)
    {
        for (auto f : e)
        {
           if (f == 0 || counter++ != f)
           {
               cout << "You suck!" << endl;
               return false;
           } else
           {
               if (counter == cellAmount) //improve ;ater
               {
                   cout << "You won!" << endl;
                   return true;
               }
           }
        }
    }

    return true;
}

void generateRandomNumsInRangeWithoutRepetitions(unordered_set<int> &randomSet, int range)
{
    while (randomSet.size() != range)
    {
        randomSet.insert(1 + (rand() % (range)));
    }
}

bool possibleToSwap(pair<int, int> &candidate, pair<int, int> &zeroCoords)
{
    if (candidate.first == zeroCoords.first) // same row
    {
        if (candidate.second + 1 == zeroCoords.second || candidate.second - 1 == zeroCoords.second)
        {
            return true;
        }
    }

    if (candidate.second == zeroCoords.second) // same column
    {
        if (candidate.first + 1 == zeroCoords.first || candidate.first - 1 == zeroCoords.first)
        {
            return true;
        }
    }

    return false;
}


void fillBoard(vector<vector<int>> &board, unordered_set<int> &randomSet)
{
    auto iterator = randomSet.begin();

    //int counter = 1;
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[i].size(); j++)
        {
            if (iterator != randomSet.end())
            {board[i][j] = *iterator++;
                //board[i][j] = counter++;
            }
        }
    }
}

int main()
{
    cout << "Enter dimension of the board: ";
    int dimension;
    cin >> dimension;

    unordered_set<int> randomSet;
    generateRandomNumsInRangeWithoutRepetitions(randomSet, dimension*dimension-1);

    vector<vector<int>> board(dimension, vector<int>(dimension));
    fillBoard(board, randomSet);

    pair<int, int> zeroCoords(dimension - 1, dimension - 1);

    cout << "Initial board: " << endl;
    displayBoard(board);
    
    int target = dimension * dimension;

    while (!gameOver(board, target))
    {
        loop:
        cout << "---------" << endl;
        cout << "Enter Coords For swap: " << endl;

        int row, column;
        cin >> row >> column;

        if (row < 0 || row >= dimension || column < 0 || column >= dimension)
        {
            cout << "enter valid coords" << endl;
           // continue;
           goto loop;
        }

        pair<int, int> candidate(row, column);

        if (possibleToSwap(candidate,zeroCoords))
        {
            swap(board[candidate.first][candidate.second], board[zeroCoords.first][zeroCoords.second]);
            candidate.swap(zeroCoords);
        } else
        {
            cout << "enter possible swap coords: " << endl;
            goto loop;
            //continue;
        }

        cout << "New Board: " << endl;
        displayBoard(board);
    }
}
